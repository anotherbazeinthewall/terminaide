[tool.poetry]
name = "terminaide"
version = "0.0.7"
description = "Serve Python CLI applications in the browser using ttyd"
repository = "https://github.com/anotherbazeinthewall/terminaide"
authors = ["Alex Basile <basileaw@gmail.com>"]
packages = [{ include = "terminaide", from = "." }]
readme = "README.md"
license = "MIT"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.dependencies]
python = "^3.12"
fastapi = ">=0.104.0"
jinja2 = ">=3.1.2"
httpx = ">=0.25.0"
websockets = ">=12.0"
pydantic = ">=2.4.2"
readchar = "^4.2.1"
uvicorn = ">=0.24.0"
rich = "^14.0.0"
chatline = { git = "https://github.com/anotherbazeinthewall/chatline-interface" }

[tool.poetry.group.dev.dependencies]
docker = "^7.1.0"
poethepoet = "^0.33.0"

[tool.poe.tasks.serve]
help = "Serves an instructional demo (no args) or one of four targeted demos (via args):"
args = [
  { name = "function", type = "boolean", help = "Serves a function" },
  { name = "script", type = "boolean", help = "Serves a script" },
  { name = "apps", type = "boolean", help = "Serves multiple scripts" },
  { name = "container", type = "boolean", help = "Same as serve apps but in a container" },
]
cmd = "python demo/server.py ${args}"

[tool.poe.tasks.release]
help = "Release a new version:"
args = [
  { name = "patch", type = "boolean", help = "Increment the patch version (0.0.X)" },
  { name = "minor", type = "boolean", help = "Increment the minor version (0.X.0)" },
  { name = "major", type = "boolean", help = "Increment the major version (X.0.0)" },
]
sequence = [
  { shell = """
    # Determine which version type to use
    if [ "${patch}" = "true" ]; then
      VERSION_TYPE="patch"
    elif [ "${minor}" = "true" ]; then
      VERSION_TYPE="minor"
    elif [ "${major}" = "true" ]; then
      VERSION_TYPE="major"
    else
      echo "Error: Please specify one version type: --patch, --minor, or --major"
      exit 1
    fi
    
    # Update version
    poetry version $VERSION_TYPE
  """ },
  { cmd = "git add pyproject.toml" },
  { shell = """
    VERSION=$(poetry version -s)
    git commit -m "release $VERSION"
    git tag v$VERSION
    git push && git push --tags
  """ },
  { shell = """
    echo "Please enter your PyPI token:"
    read -s PYPI_TOKEN
    export POETRY_PYPI_TOKEN_PYPI=$PYPI_TOKEN
    poetry publish --build -vvv
    unset POETRY_PYPI_TOKEN_PYPI
  """ },
]
